<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Laf - 标签 - 3分钟实验室</title>
        <link>http://example.org/tags/laf/</link>
        <description>Laf - 标签 - 3分钟实验室</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 11 May 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/laf/" rel="self" type="application/rss+xml" /><item>
    <title>什么是云开发？</title>
    <link>http://example.org/clouddevelopment/</link>
    <pubDate>Thu, 11 May 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/clouddevelopment/</guid>
    <description><![CDATA[本文主要解决三个问题 ：
云开发是什么 我们为什么需要云开发 如何快速上手地表最强云开发 Laf（https://laf.run） 云开发是什么？ 我们来看看 GPT 怎么说。
一句话总结：云开发是一种模式，区别于传统开发，传统开发有的东西，云开发都有，传统开发能实现的，云开发也都能实现。
那么第二个问题就来了，既然都有都能实现，我们为什么需要云开发？
我们为什么需要云开发？ 为了搞懂这个问题，我们需要先知道传统的开发流程以及所需要的技术栈，我们这里以云开发中的战斗机 Laf（laf.run）举例。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 传统开发流程： 1.购买服务器 2.配置服务器的环境数据库等 3.编写接口代码 4.把代码部署到服务器 5.前端搞定剩余工作 6.前端项目打包部署到服务器 7.后续运维工作 云开发流程： 1.打开浏览器编写接口代码 2.前端搞定剩余工作 3.项目一键托管上线到云平台 传统开发所需技术栈： 1.一门后端语言 2.后端框架 3.数据库 4.缓存技术 5.操作系统相关 6.前端三件套+框架+常用库 云开发所需技术栈： 1.云开发的数据库和文件操作 2.前端三件套+框架+常用库 了解这些之后，我想根本不需要明白这些实现细节，单单从字数上就可以感受到，云开发模式和传统开发模式之间的区别。
简单总结一下就是三省：省心省力又省钱。
用 Laf，前端我们用 js/ts 来写代码，后端接口我们还是用 js/ts 来写代码，这意味着什么？这意味着只需要掌握一门开发语言，就可以前后端通杀了，这意味着前端工程师可以瞬间变成全栈开发，意味着前端和后端再也不用吵架了。
用 Laf，可以节约服务器运维，多环境部署，告别配置调试 nginx ，告别为每个项目手动部署数据库和安全顾虑，告别 coding 一分钟发布半小时的尴尬场景等等。]]></description>
</item>
<item>
    <title>Laf 开发指南</title>
    <link>http://example.org/lafguide/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/lafguide/</guid>
    <description><![CDATA[Laf 开发指南（比官方文档更详细）待更新 laf 金丝雀版本已经不删档上线了，作为一个使用 laf 多年的开发者，毕业设计我都是用 laf 写的&hellip; 我深知 laf 对于前端程序员意味着什么，通过简单的学习就可以进行全栈开发 部署，带来了极致的开发体验，脏活累活 laf 都帮我们解决了，用 laf 甚至可以延年益寿&hellip;
本文我根据 laf 功能模块来一一介绍，可以顺序阅读，也可以根据右边导航栏找到需要了解的模块。
如果你还不知道 laf 是什么 参考：三分钟学会 Laf
:::tip 因本文图片较多，打开设备的夜间模式，或者点击本站右上角的夜间模式开关，获得最佳阅读体验。
部分图片看不清细节，PC 端 CTRL + 鼠标滚轮 放大，移动端双指放大。 :::
云函数基本功能 云函数是 laf 最重要的功能了，所以我们就从新建一个云函数开始。 进入到 laf 开发页面我们可以点击中间的立即创建和左上角的 + 符号来创建一个云函数。 参考下图的介绍来创建你的第一个云函数吧
创建完之后我们熟悉一下关于云函数都有哪些功能。
搜索 编辑 删除 编写 发布 查看 传参 调试 依赖 控制台 运行结果 集合基本功能 集合我们可以理解为数据库，每一个集合对应的就是一张表。
和创建云函数一样，我们来创建一个集合。 添加一条数据 编辑 查询 删除 存储基本功能 存储这里就是存放我们文件的地方，首先我们创建一个 bucket 上传 网站托管 日志基本功能 日志就是我们云函数的执行日志，我们回到最初创建的 get-data 函数，写入以下代码，并点击右侧的运行按钮。]]></description>
</item>
<item>
    <title>三分钟部署 laf (win 版本)</title>
    <link>http://example.org/deploylaf/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/deploylaf/</guid>
    <description><![CDATA[起步 演示系统： win11专业版（这里一定是专业版，家庭版的同学去某宝花几块钱升级一下）
首先我们需要用到一个工具 Multipass。
Multipass 是快速创建一个 linux 虚拟机的工具。 我们创建 linux 虚拟机干啥呢？用来部署 k8s 。 什么是 k8s ？ 简单理解就是可以把多台服务器，组成一个超级机器，一起来管理的一个平台。 部署k8s干啥？ 因为 laf 当前只支持在 k8s 上部署。 我们反过来说： laf 当前只支持在 k8s 上部署， k8s 只支持 linux ,而我们只有一个 windows 系统。
安装 Multipass 点击这里安装 Multipass win 版本。
一路选择下一步安装，这个地方需要注意的是一定要选这个，如果这个选项是黑的证明你的系统不是专业版。 安装完毕之后，重启电脑。
重启完执行命令。
1 2 // 启动 laf-dev 虚拟器 分配 cpus 2 memory 4G disk 50G multipass launch --name laf-dev --cpus 2 --memory 4G --disk 50G :::tip 如果遇到 launch failed: Remote &quot;&quot; is unknown or unreachable.]]></description>
</item>
<item>
    <title>三分钟学会 laf</title>
    <link>http://example.org/laf/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/laf/</guid>
    <description><![CDATA[laf 是什么 laf 是云开发平台，可以快速的开发应用 laf 是一个开源的 BaaS 开发平台（Backend as a Service) laf 是一个开箱即用的 serverless 开发平台 laf 是一个集「函数计算」、「数据库」、「对象存储」等于一身的一站式开发平台 laf 可以是开源版的腾讯云开发、开源版的 Google Firebase 一句话总结，可以让前端秒变全栈。点击这里去 Github 查看。 起步 话不多说开始正题，做一个 ToDoList。
第一步 去 https://laf.dev/ 注册一个账号
第二步 像我这样创建一个应用
第三步 点击开发按钮进入开发页面
云函数 我们新建一个函数，这个函数就是我们要写的接口。
在函数中写上以下代码return一个对象出去。
1 2 3 export async function main(ctx: FunctionContext) { return {name:&#39;小明&#39;} } 然后点击右上角发布按钮。 完成这些步骤后，我们在前端项目中调用一下试试看。
在前端项目安装 laf。
1 npm install laf-client-sdk vue 页面中使用
1 2 3 4 5 6 7 8 9 10 11 import { Cloud } from &#34;laf-client-sdk&#34;; // 引入laf // 创建cloud对象 const cloud = new Cloud({ baseUrl: &#34;http://pcsw70.]]></description>
</item>
</channel>
</rss>
