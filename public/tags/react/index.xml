<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>React - 标签 - 3分钟实验室</title>
        <link>http://example.org/tags/react/</link>
        <description>React - 标签 - 3分钟实验室</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</lastBuildDate><atom:link href="http://example.org/tags/react/" rel="self" type="application/rss+xml" /><item>
    <title>三分钟上手 Next.js</title>
    <link>http://example.org/next/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/next/</guid>
    <description><![CDATA[起步 Next.js 能干啥？
Compiling ： 把我们写的 jsx TS 等编译成浏览器认识的 js。 Minifying ： 把代码里的 缩进 空格 换行 删掉，减少文件大小来提高性能。 Bundling ： 把多个文件打包组合成更少的文件。 Code Splitting ：把代码按需分成小块，通过只加载需要的部分来减少加载时间。 Rendering ：支持服务端渲染直接发送 html 文件到浏览器，提升渲染速度。 。。。来点更直接的，Next.js 是 react 的一个框架，提供了很多方便的功能。
以下命令创建一个 next 项目。
1 npx create-next-app@latest 用 vscode 打开并清空 src/pages/index.js 和 src/styles/globals.css
然后在 index.js 中贴入以下代码。
1 2 3 4 5 6 7 export default function Home() { return ( &lt;&gt; &lt;h1&gt;你好,next&lt;/h1&gt; &lt;/&gt; ) } npm run dev 启动项目，打开 localhost:3000 快速刷新 更改 next 为 小明 就会发现浏览器视图已经更新，无需手动刷新，这就是快速刷新。]]></description>
</item>
<item>
    <title>三分钟学会 Chakra-UI 写一个厉害的登录页</title>
    <link>http://example.org/chakra/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/chakra/</guid>
    <description><![CDATA[三分钟学会 Chakra-UI 写一个厉害的登录页 起步 老规矩创建一个项目用 vscode 打开
1 2 3 npm create vite chakra-demo --template react cd chakra-demo code . 打开后删除 src 下的其他文件夹，只保留 App.jsx 和 main.jsx 写入以下代码
App.jsx
1 2 3 4 5 function App() { return &lt;h1&gt;你好,chakra&lt;/h1&gt; } export default App main.jsx
1 2 3 4 5 6 7 8 9 import React from &#39;react&#39; import ReactDOM from &#39;react-dom/client&#39; import App from &#39;./App&#39; ReactDOM.createRoot(document.getElementById(&#39;root&#39;)).render( &lt;React.StrictMode&gt; &lt;App /&gt; &lt;/React.StrictMode&gt;, ) 准备好这些以后 安装 chakra 并且安装一下依赖 把程序 run 起来]]></description>
</item>
<item>
    <title>三分钟学会 ClickToComponent</title>
    <link>http://example.org/clicktocomponent/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/clicktocomponent/</guid>
    <description><![CDATA[起步 老规矩创建一个项目用 vscode 打开
1 2 3 4 5 6 npm create vite clickToComponent-demo --template react cd clickToComponent-demo // 这里顺手把依赖装了 npm i npm install click-to-react-component code . 删除 src 下面的多余文件，保留 App.jsx main.jsx 并创建 black.jsx red.jsx 分别写入以下代码 main.jsx
1 2 3 4 5 6 7 8 9 10 11 12 13 import React from &#39;react&#39; import ReactDOM from &#39;react-dom/client&#39; import App from &#39;./App&#39; // 这里引入 import { ClickToComponent } from &#34;click-to-react-component&#34;; ReactDOM.]]></description>
</item>
<item>
    <title>三分钟学会 React</title>
    <link>http://example.org/react/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/react/</guid>
    <description><![CDATA[起步 运行命令创建一个 react 项目。
1 npx create-react-app todo-list 等待创建完毕后用 vscode 打开此项目。
删除 src 下面多余文件，只保留 index.js 和 index.css 清空 index.js 和 index.css
复制以下代码到 index.js 1 2 3 4 5 6 7 import ReactDOM from &#39;react-dom/client&#39;; // 创建根节点 const root = ReactDOM.createRoot(document.getElementById(&#39;root&#39;)); // 渲染 root.render(&lt;h1&gt;你好,react&lt;/h1&gt;); 在项目目录下执行 npm run start。
访问 localhost:3000 ，就可以看到我们的内容啦。 JSX 刚刚这段代码在 js 中使用了 html,这就是 JSX,简单理解为 js 中可以使用 html 而 html 中也可以使用 js。
1 root.render(&lt;h1&gt;你好,react&lt;/h1&gt;); 示例
1 2 3 4 5 6 import ReactDOM from &#39;react-dom/client&#39;; const root = ReactDOM.]]></description>
</item>
<item>
    <title>三分钟学会 React-Router</title>
    <link>http://example.org/reactrouter/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/reactrouter/</guid>
    <description><![CDATA[起步 首先创建一个项目 并安装 react-router
1 2 3 npm create vite reactRouter-demo --template react cd .\reactRouter-demo\ npm install react-router-dom 用 vscode 打开并清空 src 文件夹 只保留 APP.jsx 和 main.jsx
在 App.jsx 中写入以下代码
1 2 3 4 5 6 7 8 9 function App() { return ( &lt;h1&gt; 你好,React Router &lt;/h1&gt; ) } export default App 然后
1 2 npm i npm run dev 配置路由 src 文件下创建 pages 文件夹
然后在 pages 文件下创建 home.jsx 和 login.]]></description>
</item>
<item>
    <title>三分钟学会 tailwind 和 Css 说拜拜</title>
    <link>http://example.org/tailwind/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/tailwind/</guid>
    <description><![CDATA[起步 老规矩创建一个项目用 vscode 打开
1 2 3 npm create vite tailwind-demo --template react cd tailwind-demo code . 打开后删除 src 下的其他文件夹，只保留 App.jsx App.css 和 main.jsx 写入以下代码
App.jsx
1 2 3 4 5 6 7 8 9 10 11 import &#34;./App.css&#34;; function App() { return ( &lt;&gt; &lt;h1&gt;你好,tailwind&lt;/h1&gt; &lt;/&gt; ) } export default App main.jsx
1 2 3 4 5 6 7 8 9 import React from &#39;react&#39; import ReactDOM from &#39;react-dom/client&#39; import App from &#39;.]]></description>
</item>
<item>
    <title>三分钟学会 zustand 优雅的管理你的状态</title>
    <link>http://example.org/zustand/</link>
    <pubDate>Tue, 25 Apr 2023 00:00:00 &#43;0000</pubDate>
    <author>左风</author>
    <guid>http://example.org/zustand/</guid>
    <description><![CDATA[起步 老规矩创建一个项目用 vscode 打开
1 2 3 npm create vite zustand-demo --template react cd zustand-demo code . 删除 src 下多余文件 保留 App.jsx main.jsx , 并新增一个 store.js App.jsx 中写入以下代码
1 2 3 4 5 function App() { return &lt;&gt;&lt;h1&gt;你好,zustand&lt;/h1&gt;&lt;/&gt;; } export default App; main.jsx 中写入以下代码
1 2 3 4 5 6 7 8 9 import React from &#39;react&#39; import ReactDOM from &#39;react-dom/client&#39; import App from &#39;./App&#39; ReactDOM.createRoot(document.getElementById(&#39;root&#39;)).render( &lt;React.StrictMode&gt; &lt;App /&gt; &lt;/React.StrictMode&gt;, ) 依次执行以下命令]]></description>
</item>
</channel>
</rss>
